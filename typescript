Script started on Mon 24 Sep 2018 07:23:25 PM EDT
llw5@gold12:~/cs112/proj2$ ls
array.cpp      array.h		ArrayTester.h  main.cpp
arrayData.txt  ArrayTester.cpp	Debug	       typescript
llw5@gold12:~/cs112/proj2$ cat .h
cat: .h: No such file or directory
llw5@gold12:~/cs112/proj2$ cat /.h
cat: /.h: No such file or directory
llw5@gold12:~/cs112/proj2$ cat array.cpp array.hj  ArrayTester.hj  main.cpp arrayDat a.txt ArrayTester.cpp
/* array.cpp defines "C style" array operations
 * Name:
 * Date:
 * Begun by: Joel Adams, for CS 112 at Calvin College.
 */
 
#include "array.h"
#include <iostream>
#include <fstream>
#include <stdlib.h>
using namespace std;

void initialize(double *a, unsigned size) {
	int val = 0;
	for (unsigned i = 0; i < size; i++) {
		val = i+1;
		a[i] = val;
	}
}
 
void print(double *a, unsigned size) {
	//prints values in array
	for (unsigned i = 0; i < size; i++) {
		cout << *a << '\t';
		a++;
	}
}		

double average(double *a, unsigned size) {
	//Calculates the average value for an array
	double value = 0;
	for(unsigned i = 0; i < size; i++){
		value += *a;
		a++;
	}
	value = value/size;
	return value;
}

double sum(double *a, int size){
	//Calculates the sum of values in an array
	double value = 0;
	for(int i = 0; i < size; i++){
		value += *a;
		a++;
	}
	return value;
}
void read(istream& in, double *a, int size){
	//This function should read size values from in and store them in a.
	string input;
	for(int i = 0; i < size; i++){
		getline(in, input);
		a[i]= atof(input.c_str());
	}

}


void resize(double *&a, int oldSize, int newSize){
	// changes the size of an array
	double *b = new double [newSize];
	int difference = newSize - oldSize;
	if (newSize > oldSize){
		for(int i = 0; i <oldSize; i++){
			b[i]= a[i];
		}
		for(int i = oldSize; i < difference; i++){
			b[i] = 0;
		}

	}
	if (oldSize > newSize){
		for(int i = 0; i <newSize; i++){
			b[i]= a[i];
		}
	}
	delete [] a;
	a = b;
	//delete [] b;
}

void fill(const string& fileName, double *&a, int &numValues){

	// opens file stream
	ifstream fin(fileName.c_str());

	// extracts numValues and puts them in fin
	fin >> numValues;

	// delets junk values for the array
	delete [] a;

	// creates a new array with an adequate size
	a = new double[numValues];

	// adds values from array to file
	for(int i=0; i <numValues; ++i){
		fin >> a[i];
	}

	// close file stream
	fin.close();


}
void concat(double *a1, int size1, double *a2, int size2, double *&a3, int &size3){

	//intializes size 3
	size3 = size1 + size2;

	// deletes junk values in a3
	delete a3;

	// creates new array
	a3 = new double[size3];

	// adds values from array 1 to array 3

	for(int i = 0; i < size1; i++){
		a3[i]= a1[i];
	}

	// adds values from array 2 to array 3
	for(int i = 0; i < size2; i++){
		a3[i+size1]= a2[i];
	}

}

/* array.h declares "C style" array operations.
 * Name:
 * Date:
 * Begun by: Joel Adams, for CS 112 at Calvin College.
 */
 
#include <iostream>
#include <cassert>
using namespace std;

void initialize(double *a, unsigned size);

void print(double *a, unsigned size);

double average(double *a, unsigned size);


double sum(double*a, int size);
void read(istream& in, double *a, int size);
void fill(const string& fileName, double *&a, int &numValues);
void resize(double *&a, int oldSize, int newSize);
void concat(double *a1, int size1, double *a2, int size2, double *&a3, int &size3);
/*ArrayTester.h provides a class to test C-style array operations.
 * Student: Lorrayya Williams
 * Date: Spetemeber 19, 2018
 * By: Joel Adams, for CS 112 at Calvin College.
 */
#ifndef ARRAY_TESTER_H_
#define ARRAY_TESTER_H_

#include "array.h"  // the functions we are testing
#include <iostream>
#include <cassert>
using namespace std;

class ArrayTester
{
public:
	ArrayTester();
	virtual ~ArrayTester();
	void runTests();
	void setup();
	void cleanup();
	void testInitialize();
	void testPrint();
	void testAverage();
	void testSum();
	void testResize();
	void testConcat();
	void testFill();
	void testRead();
private:
	double * a1;
	double * a2;
	double * a3;
};

#endif /*ARRAY_TESTER_H_*/
/* main.cpp drives the testing of the array operations.
 * Student:
 * Date:
 * Begun by: Joel Adams, for CS 112 at Calvin College.
 */
 
#include "ArrayTester.h"

int main() {
	ArrayTester at;
	at.runTests();
}
6
10
11
12
13
14
15/* ArrayTester.cpp defines the methods to test C-style array operations.
 * Student: Lorrayya Williams
 * Date: September 19, 2018
 * By: Joel Adams, for CS 112 at Calvin College.
 */
 
 #include "ArrayTester.h"
 #include <fstream>
 using namespace std;

ArrayTester::ArrayTester() {
	a1 = a2 = a3 = NULL;
}

ArrayTester::~ArrayTester() {
        cleanup();
}

void ArrayTester::cleanup() {
	delete [] a1; a1 = NULL;
	delete [] a2; a2 = NULL;
	delete [] a3; a3 = NULL;
}

void ArrayTester::runTests() {
	testInitialize();
	testPrint();
	testAverage();
	testSum();
	testResize();
	testConcat();
	testRead();

	testFill();
	cout << "All tests passed!" << endl;
}

void ArrayTester::setup() {
	a1 = new double[3];
	for (int i = 0; i < 3; i++) {
		a1[i] = i+1;
	}
	a2 = new double[4];
	for (int i = 0; i < 4; i++) {
		a2[i] = i+2;
	}
	a3 = new double[5];
	for (int i = 0; i < 5; i++) {
		a3[i] = i+3;
	}
}

void ArrayTester::testInitialize()  {
	cout << "Testing initialize()... " << flush;
	setup();
	initialize(a1, 3);
	for (int i = 0; i < 3; i++) {
		assert( a1[i] == i+1 );
	}
	initialize(a2, 4);
	for (int i = 0; i < 4; i++) {
		assert( a2[i] == i+1 );
	}
	initialize(a3, 5);
	for (int i = 0; i < 5; i++) {
		assert( a3[i] == i+1 );
	}
        cleanup();
	cout << "Passed!" << endl;
}

void ArrayTester::testPrint() {
	cout << "Testing print()... " << flush;
	setup();
	cout << "\nExpecting 3 values: 1, 2, 3..." << endl;
	print(a1, 3);
	cout << "\nExpecting 4 values: 2, 3, 4, 5..." << endl;
	print(a2, 4);
	cout << "\nExpecting 5 values: 3, 4, 5, 6, 7..." << endl;
	print(a3, 5);
        cleanup();
	cout << "\nPassed!" << endl;
}

void ArrayTester::testAverage() {
	cout << "Testing average()... " << flush;
	setup();
	assert( average(a1, 3) == 2  );
	assert( average(a2, 4) == 3.5 );
	assert( average(a3, 5) == 5 );
        cleanup();
	cout << "Passed!" << endl;
}

void ArrayTester::testSum() {
	cout << "Testing sum()... " << flush;
	setup();
	assert( sum(a1, 3) == 6 );
	assert( sum(a2, 4) == 14 );
	assert( sum(a3, 5) == 25 );
        cleanup();
	cout << "Passed!" << endl;
}

void ArrayTester::testResize() {
	cout << "Testing resize()... " << flush;
	setup();
	double * temp1 = a1;
	resize(a1, 3, 7);
	assert( a1 != temp1 );
	for (int i = 0; i < 3; i++) {
		assert( a1[i] == i+1 );
	}
	for (int i = 3; i < 7; i++) {
		assert( a1[i] == 0 );
	}
	
	double *temp3 = a3;
	resize(a3, 5, 3);
	assert( temp3 != a3 );
	for (int i = 0; i < 3; i++) {
		assert( a3[i] == i+3 );
	}
        cleanup();
	cout << "Passed!  But double-check that you deleted the old array..." << endl;
}

void ArrayTester::testConcat() {
	cout << "Testing concat()... " << flush;
	setup();
	int size1 = 3, size2 = 4, size3 = 5;
	double *temp1 = a1;
	double *temp2 = a2;
	double *temp3 = a3;
	concat(a1, size1, a2, size2, a3, size3);
	assert( temp1 == a1 );
	assert( temp2 == a2 );
        /* the next assertion assumes that the new array's base
         *  address is different from the old array's base address,
         *  which may not be true. If concat() seems to be right,
         *  and passes all assertions except this one, you may
         *  comment out this assertion.
         */
	assert( temp3 != a3 );
	assert( size1 == 3 );
	assert( size2 == 4 );
	assert( size3 == 7 );
	for (int i = 0; i < 3; i++) {
		assert( a3[i] == i+1 );
	}
	int j = 2;
	for (int i = 3; i < 7; i++) {
		assert( a3[i] == j );
		j++;
	}
        cleanup();
	cout << "Passed!  But double-check that you deleted the old array..." << endl;
}


void ArrayTester::testFill() {
	cout << "Testing fill()... " << flush;	
	setup();
	int size1 = 3;
	double *temp1 = a1;
	fill("arrayData.txt", a1, size1);
	assert( a1 != temp1 );
	assert( size1 == 6);
	for (int i = 0; i < size1; i++) {
		assert( a1[i] == i+10 );   // values should be 10, 11, 12, 13, 14, 15
	}
        cleanup();
	cout << "Passed!  But double-check that you deleted the old array..." << endl;
}

void ArrayTester::testRead() {
	cout << "Testing read()... " << flush;
	double* a4 = new double[6];
	ifstream fin("arrayData.txt");
	assert( fin.is_open() );
	string firstLine, secondLine;
	getline(fin, firstLine);         // skip past the '6' that's there for fill()...
	getline(fin, secondLine);        // skip past the '10' 
	read(fin, a4, 5);                // read 5 values instead of 6 
	for (int i = 0; i < 5; i++) {    // check what we got:
		assert( a4[i] == i+11 ); //  values should be 11, 12, 13, 14, 15,
	}                                //   so test-values differ from fill()
        delete [] a4;
	cout << "Passed!" << endl;
}

llw5@gold12:~/cs112/proj2$ cd Debug
llw5@gold12:~/cs112/proj2/Debug$ ls
array.d  ArrayTester.d	main.d	makefile    proj2	subdir.mk
array.o  ArrayTester.o	main.o	objects.mk  sources.mk
llw5@gold12:~/cs112/proj2/Debug$ make all
make: Nothing to be done for 'all'.
llw5@gold12:~/cs112/proj2/Debug$ cd ..
llw5@gold12:~/cs112/proj2$ ./Debug/proj2
Testing initialize()... Passed!
Testing print()... 
Expecting 3 values: 1, 2, 3...
1	2	3	
Expecting 4 values: 2, 3, 4, 5...
2	3	4	5	
Expecting 5 values: 3, 4, 5, 6, 7...
3	4	5	6	7	
Passed!
Testing average()... Passed!
Testing sum()... Passed!
Testing resize()... Passed!  But double-check that you deleted the old array...
Testing concat()... Passed!  But double-check that you deleted the old array...
Testing read()... Passed!
Testing fill()... Passed!  But double-check that you deleted the old array...
All tests passed!
llw5@gold12:~/cs112/proj2$ exit

Script done on Mon 24 Sep 2018 07:28:36 PM EDT
